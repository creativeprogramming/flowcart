<?php
/**
 * @package     Joomla.Site
 * @subpackage  Content.Flowcart
 *
 * @author      Seth Warburton & Roberto Segura <social@flowcart.me>
 * @copyright   (c) 2012 Flowcart. All Rights Reserved.
 * @license     GNU/GPL 2, http://www.gnu.org/licenses/gpl-2.0.htm
 */
defined('_JEXEC') or die;

JLoader::import('joomla.plugin.plugin');
JLoader::import('flowcart.helpers.document');

/**
 * Main plugin class
 *
 * @version     31/08/2012
 * @package     Joomla.Plugin
 * @subpackage  Content.Flowcart
 * @since       2.5
 *
 */
class PlgContentFlowcart extends JPlugin
{

	private $_params = null;

	// Plugin info constants
	const TYPE = 'content';

	const NAME = 'flowcart';

	// Handy objects
	private $_app      = null;

	private $_doc      = null;

	private $_jinput   = null;

	// Paths
	private $_pathPlugin = null;

	// Urls
	private $_urlPlugin    = null;

	private $_urlJs        = null;

	private $_urlCss       = null;

	// Url parameters
	private $_option   = null;

	private $_view     = null;

	private $_id       = null;

	// CSS & JS scripts calls
	private $_cssCalls = array();

	private $_jsCalls  = array();

	// HTML positions to inject CSS & JS
	private $_htmlPositions = array(
			'headtop' => array( 'pattern' => "/(<head>)/isU",
								'replacement' => "$1\n\t##CONT##"),
			'headbottom' => array(  'pattern' => "/(<\/head>)/isU",
									'replacement' => "\n\t##CONT##\n$1"),
			'bodytop' => array( 'pattern' => "/(<body)(.*)(>)/isU",
								'replacement' => "$1$2$3\n\t##CONT##"),
			'bodybottom' => array(  'pattern' => "/(<\/body>)/isU",
									'replacement' => "\n\t##CONT##\n$1"),
			'belowtitle' => array(  'pattern' => "/(<\/title>)/isU",
									'replacement' => "$1\n\t##CONT##")
			);

	// Autogenerated with array_keys($this->_htmlPositions)
	private $_htmlPositionsAvailable = array();

	// Used to validate url
	private $_componentsEnabled    = array('*');

	private $_viewsEnabled         = array('*');

	// Configure applications where enable plugin
	private $_frontendEnabled  = true;

	private $_backendEnabled   = true;

	/**
	* Constructor
	*
	* @param   mixed  &$subject  Subject
	*/
	function __construct( &$subject )
	{

		parent::__construct($subject);

		// Required objects
		$this->_app 	= JFactory::getApplication();
		$this->_doc 	= JFactory::getDocument();
		$this->_jinput 	= $this->_app->input;

		// Get url parameters
		$this->_option 	= $this->_jinput->get('option', null);
		$this->_view 	= $this->_jinput->get('view', null);
		$this->_id 		= $this->_jinput->get('id', null);

		// Set the HTML available positions
		$this->_htmlPositionsAvailable = array_keys($this->_htmlPositions);

		// Load plugin parameters
		$this->_plugin = JPluginHelper::getPlugin(self::TYPE, self::NAME);
		$this->_params = new JRegistry($this->_plugin->params);

		// Init folder structure
		$this->_initFolders();

		// Load plugin language
		$this->loadLanguage('plg_' . self::TYPE . '_' . self::NAME, JPATH_ADMINISTRATOR);
	}

	/**
	 * This event is triggered after the framework has loaded and the application initialise method has been called.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onAfterInitialise()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This event is triggered after the framework has loaded and initialised and the router has routed the client request.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onAfterRoute()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This event is triggered after pulling the option from the request object and mapping them to a component.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onAfterDispatch()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This event is triggered immediately before pushing the document buffers into the template placeholders,
	 * retrieving data from the document and pushing it into the into the JResponse buffer.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onBeforeRender()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This event is triggered after pushing the document buffers into the template placeholders,
	 * retrieving data from the document and pushing it into the into the JResponse buffer.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onAfterRender()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This event is triggered before the framework creates the Head section of the Document.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onBeforeCompileHead()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * Add the flowcart params to the article view
	 *
	 * @param  Jform  $form  The jForm object
	 * @param  [type] $data [description]
	 *
	 * @return boolean
	 */
	function onContentPrepareForm($form, $data)
	{
		// Verify that we have a valid JForm object
		if (!($form instanceof JForm))
		{
			$this->_subject->setError('JERROR_NOT_A_FORM');
			return false;
		}

		// Only add data to the article form
		if ($form->getName() != 'com_content.article')
		{
			return true;
		}

		// Required objects
		$doc = JFactory::getDocument();

		// Load CSS
		if (version_compare(JVERSION, '3.0', 'ge'))
		{
			$doc->addStyleSheet($this->_urlCss . '/flowcart.j30.css');
		}
		else
		{
			$doc->addStyleSheet($this->_urlCss . '/flowcart.j25.css');
		}

		// Load JS
		$doc->addScript($this->_urlJs . '/flowcart.jquery.js');
		// $doc->addScript($this->_urlJs . '/flowcart.mootools.js');

		// Add our custom form and our custom fields
		JForm::addFormPath(dirname(__FILE__) . '/forms');
		JForm::addFieldPath(dirname(__FILE__) . '/fields');
		$form->loadFile('article', false);


/*
		$doc = &JFactory::getDocument();
		$doc->addStyleSheet(JURI::base().'components'.DS.'com_j2store'.DS.'css'.DS.'style.css');

		// Add the registration fields to the form.
		JForm::addFormPath(dirname(__FILE__).'/j2store');
		JForm::addFieldPath(dirname(__FILE__).'/j2store/fields');
		$form->loadFile('j2store', false);

		// Load the data from j2store_prices table into the form
		$articleId = isset($data->id) ? $data->id : 0;

		// Load the price data from the database.
		$db = JFactory::getDbo();
		$db->setQuery(
				'SELECT article_id,item_price,item_tax,item_shipping,item_sku,product_enabled FROM #__j2store_prices' .
				' WHERE article_id = '.(int) $articleId);
		$price = $db->loadObject();

		// Check for a database error.
		if ($db->getErrorNum())
		{
			$this->_subject->setError($db->getErrorMsg());
			return false;
		}
*/
		if( isset($price) )
		{
			$data->attribs['product_enabled']=$price->product_enabled;
			$data->attribs['item_price']=$price->item_price;
			$data->attribs['item_tax']=$price->item_tax;
			$data->attribs['item_shipping']=$price->item_shipping;
			$data->attribs['item_sku']=$price->item_sku;
		}
		return true;
	}

	/**
	 * This event is triggered by a variety of search related operations.
	 * It is a request for a plugin to return the result of a search request.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onSearch()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This appears to be a request for plugins to identify which "areas" they provide search facilities for.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onSearchAreas()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * This is an introspection request for plugins that provide web services.
	 * http://docs.joomla.org/Plugin/Events/System
	 *
	 * @return boolean
	 */
	function onGetWebServices()
	{
		// Validate view
		if (!$this->_validateUrl())
		{
			return true;
		}
	}

	/**
	 * Add a css file declaration
	 *
	 * @param   string  $cssUrl    url of the CSS file
	 * @param   string  $position  position where we are going to load JS
	 *
	 * @return none
	 *
	 * @author Roberto Segura - Digital Disseny, S.L.
	 * @version 23/04/2012
	 */
	private function _addCssCall($cssUrl, $position = null)
	{
		// If position is not available we will try to load the url through $doc->addScript
		if (is_null($position) || !in_array($position, $this->_htmlPositionsAvailable))
		{
			$position = 'addstylesheet';
			$cssCall = $jsUrl;
		}
		else
		{
			$cssCall = '<link rel="stylesheet" type="text/css" href="' . $cssUrl . '" >';
		}

		// Initialize position
		if (!isset($this->_cssCalls[$position]))
		{
			$this->_cssCalls[$position] = array();
		}

		// Insert CSS call
		$this->_cssCalls[$position][] = $cssCall;
	}

	/**
	 * Add a JS script declaration
	 *
	 * @param   string  $jsUrl     url of the JS file or script content for type != url
	 * @param   string  $position  position where we are going to load JS
	 * @param   string  $type      url || script
	 *
	 * @return none
	 */
	private function _addJsCall($jsUrl, $position = null, $type = 'url')
	{

		// If position is not available we will try to load the url through $doc->addScript
		if (is_null($position) || !in_array($position, $this->_htmlPositionsAvailable))
		{
			$position = 'addscript';
			$jsCall = $jsUrl;
		}
		else
		{
			if ($type == 'url')
			{
				$jsCall = '<script src="' . $jsUrl . '" type="text/javascript"></script>';
			}
			else
			{
				$jsCall = '<script type="text/javascript">' . $jsUrl . '</script>';
			}
		}

		// Initialize position
		if (!isset($this->_jsCalls[$position]))
		{
			$this->_jsCalls[$position] = array();
		}

		// Insert JS call
		$this->_jsCalls[$position][] = $jsCall;
	}

	/**
	 * Initialize folder structure
	 *
	 * @return none
	 */
	private function _initFolders()
	{
		// Paths
		$this->_pathPlugin = JPATH_PLUGINS . '/' . self::TYPE . '/' . self::NAME;

		// URLs
		$this->_urlPlugin 	= JURI::root(true) . "/plugins/" . self::TYPE . "/" . self::NAME;
		$this->_urlJs 		= $this->_urlPlugin . "/js";
		$this->_urlCss 		= $this->_urlPlugin . "/css";
	}

	/**
	 * Load / inject CSS
	 *
	 * @return none
	 */
	private function _loadCSS()
	{
		if (!empty($this->_cssCalls))
		{
			$body = JResponse::getBody();
			foreach ($this->_cssCalls as $position => $cssCalls)
			{
				if (!empty($cssCalls))
				{
					// If position is defined we append code (inject) to the desired position
					if (in_array($position, $this->_htmlPositionsAvailable))
					{
						// Generate the injected code
						$cssIncludes = implode("\n\t", $cssCalls);
						$pattern = $this->_htmlPositions[$position]['pattern'];
						$replacement = str_replace('##CONT##', $cssIncludes, $this->_htmlPositions[$position]['replacement']);
						$body = preg_replace($pattern, $replacement, $body);
					}
					else
					{
						$doc = JFactory::getDocument();
						foreach ($cssCalls as $cssUrl)
						{
							$doc->addStyleSheet($cssUrl);
						}
					}
				}
			}
			JResponse::setBody($body);
			return $body;
		}
	}

	/**
	 * Load / inject Javascript
	 *
	 * @return none
	 */
	private function _loadJS()
	{
		if (!empty($this->_jsCalls))
		{
			$body = JResponse::getBody();
			foreach ($this->_jsCalls as $position => $jsCalls)
			{
				if (!empty($jsCalls))
				{
					// If position is defined we append code (inject) to the desired position
					if (in_array($position, $this->_htmlPositionsAvailable))
					{
						// Generate the injected code
						$jsIncludes = implode("\n\t", $jsCalls);
						$pattern = $this->_htmlPositions[$position]['pattern'];
						$replacement = str_replace('##CONT##', $jsIncludes, $this->_htmlPositions[$position]['replacement']);
						$body = preg_replace($pattern, $replacement, $body);
					}
					else
					{
						$doc = JFactory::getDocument();
						foreach ($jsCalls as $jsUrl)
						{
							$doc->addScript($jsUrl);
						}
					}
				}
			}
			JResponse::setBody($body);
			return $body;
		}
	}

	/**
	 * Validate if the plugin is enabled for current application (frontend / backend)
	 *
	 * @return boolean
	 */
	private function _validateApplication()
	{
		if ( ($this->_app->isSite() && $this->_frontendEnabled)
			|| ($this->_app->isAdmin() && $this->_backendEnabled) )
		{
			return true;
		}
		return false;
	}

	/**
	 * Validate option in url
	 *
	 * @return boolean
	 */
	private function _validateComponent()
	{
		if ( in_array('*', $this->_componentsEnabled) || in_array($this->_option, $this->_componentsEnabled) )
		{
			return true;
		}
		return false;
	}

	/**
	 * Custom method for extra validations
	 *
	 * @return boolean
	 */
	private function _validateExtra()
	{
		return true;
	}

	/**
	 * Plugin enabled for this url?
	 *
	 * @return boolean
	 */
	private function _validateUrl()
	{
		if ( $this->_validateComponent() && $this->_validateView())
		{
			if (method_exists($this, '_validateExtra'))
			{
				return $this->_validateExtra();
			}
			else
			{
				return true;
			}
		}
		return false;
	}

	/**
	 * Validate view parameter in url
	 *
	 * @return boolean
	 */
	private function _validateView()
	{
		if ( in_array('*', $this->_viewsEnabled) || in_array($this->_view, $this->_viewsEnabled))
		{
			return true;
		}
		return false;
	}
}
